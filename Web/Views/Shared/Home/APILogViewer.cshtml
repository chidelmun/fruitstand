@model Web.Models.Home.APILogViewerModel
@using Web.Code.Common.Extensions
@using Web.Code.Common.Extensions
<div id="@Model.UniqueID" class="log-viewer-con">
	<div class="raw-json-con" tabindex="0">
		<div class="rpt-head"><h2>Details</h2>

			<a id="BtnCloseJson" class="icon delete">Close panel</a>
		</div>
		
		<textarea id="TxtJson" readonly tabindex="1"></textarea>
	</div>

	<div class="toggle-developer-mode inline-only">Show</div>	
	<div class="rpt-head">
		<h2>Developer console</h2>

		<a class="icon refresh inline-only" id="BtnNewWindow">New window</a>
	</div>
	<div class="intro">
	<p>
		The developer console is designed to show developers exactly how we are using the Pushpay API, by showing all requests and responses between the two.
		Just use the site as usual and keep an eye on the panel below.
	</p>
	<p class="inline-only">
		<strong>Note: </strong>
		We recommend you <a id="BtnNewWindow">open this in a new window</a> so you can view the logs between page loads.
	</p>
	</div>
<div class="requests-con">
	<div id="PHLogMessages"></div>
</div>
</div>

<script src="@Url.ContentWithVersion("~/scripts/jquery.signalR-2.1.0.min.js")"  ></script>
<script src="@Url.ContentWithVersion("~/signalr/hubs")"  ></script>
<script src="@Url.ContentWithVersion("~/scripts/messagebroadcaster.js")"  ></script>
<script>
	/*
	APILogViewer
		Listens to API events from our server and displays them on-screen so that developers may understand what is going on with the API
	*/
	var APILogViewer = function(containerSelector, model) {
		var $con = $(containerSelector),
			$PHLogMessages = $con.find('#PHLogMessages'),
			$RawJson = $con.find('.raw-json-con'),
			Init = function() {
				MessageBroadcaster.JoinGroup('APIRequestsForUser', model.CurrentUserID);
				MessageBroadcaster.Subscribe('APIRequestSent', OnRequestSending);
				MessageBroadcaster.Subscribe('APIResponseReceived', OnResponseReceived);
				MessageBroadcaster.Subscribe('APIError', OnError);

				$con.on('click', '#BtnNewWindow', OpenWindow);
				
				// Escape key hides our JSON
				$RawJson.on('click', '#BtnCloseJson', HideMessageDetails);
				$RawJson.bind('keyup', function(e) {
					if (e.which == 27) HideMessageDetails();
				});
	
				// Allow user to expand JSON objects by clicking on them
				$con.on('click', '.expandable .property-name', function() {
					var $parent = $(this).parents('.expandable').eq(0);
					$parent.toggleClass('expanded');
				});
			},
			OpenWindow = function() {
				var url = '/home/developerconsole';
				var popup = window.open(url, 'developerconsole', 'top=100,left=100,width=600,height=600');
				
				// Close this panel because its now open in the popup
				Lib.ToggleDeveloperMode();
			},
			ShowLogMessage = function($elementToShow, apiTransactionID, transactionDesc) {
				console.log("Transaction", apiTransactionID);
				console.log("Transaction desc", transactionDesc);
				$elementToShow.addClass('request-details-con').attr('data-apitransactionid', apiTransactionID);
				if (transactionDesc != '') $elementToShow.prepend('<span class="transaction-title">' + transactionDesc + '</span>');
				
				// If we have an existing item in this transaction, then we show underneath, otherwise we append to the top
				var $priorTransaction = $PHLogMessages.find('[data-apitransactionid=' + apiTransactionID + ']').last();
				if ($priorTransaction.length) {
					$elementToShow.addClass('is-subsequent-transaction');
					$priorTransaction.after($elementToShow);
				}else{
					$elementToShow.addClass('is-initial-transaction');
					$PHLogMessages.prepend($elementToShow);
				}
				setTimeout(function() {
					$elementToShow.addClass('show-in-list');
				}, 50);

			},
			HideMessageDetails = function() {
				$RawJson.removeClass('active');
			},
			ShowMessageDetails = function(json) {
				console.log(json);

				// Dynamically adjust the height of the text area to use as much room as possible
				$RawJson.find('textarea').val(json).focus().select();
				$RawJson.width($con.width() - 50).addClass('active');
			},
			OnRequestSending = function(details, apiTransactionID, transactionDesc) {
				// Create an HTML template to show the details
				var $div = $('<div><div class="header"><span class="title">Sending API Request</span></div></div>');
				var $header = $div.find('.header');
				var $fields = $('<fieldset class="small horiz"></fieldset>');
				$div.append($fields);

				var fn_addfield = function(label, content) {
					var $dl = $('<dl></dl');
					$dl.append($('<dt></dt>').html(label));
					$dl.append($('<dd></dd>').html(content));
					$fields.append($dl);
				};

				fn_addfield('URL', details.FullUrl);
				fn_addfield('Method', details.Method);
				if (details.SerializedContent != '') {
					var $btnRaw = $('<a class="icon preview ">Raw JSON</a>');
					$header.append($btnRaw);
					$btnRaw.click(function() {
						ShowMessageDetails(details.SerializedContent);
					});
					
					var $btnToggleAll = $('<a class="icon refresh">Expand/collapse all</a>');
					$header.append($btnToggleAll);
					$btnToggleAll.click(function() {
						if ($(this).hasClass('all-expanded')) {
							$div.find('.expanded').removeClass('expanded');
						} else {
							$div.find('.expandable').addClass('expanded');
						}
						$(this).toggleClass('all-expanded');
					});
					
					$div.append(Lib.FormatJson(details.SerializedContent, 'Request body'));	
				}
				
				
				ShowLogMessage($div, apiTransactionID, transactionDesc);
			},
			OnResponseReceived = function(responseDetails, apiTransactionID, transactionDesc) {
				var $div = $('<div></div>');

				var $header = $('<div class="header"><span class="title">API Response Received</span></div>');
				$div.append($header);
				
				// Button to view raw JSON
				var $btnRaw = $('<a class="icon preview">Raw JSON</a>');
				$header.append($btnRaw);
				$btnRaw.click(function() {
					ShowMessageDetails(responseDetails.JSON);
				});
				
				var $btnToggleAll = $('<a class="icon refresh">Expand/collapse all</a>');
				$header.append($btnToggleAll);
				$btnToggleAll.click(function() {
					if ($(this).hasClass('all-expanded')) {
						$div.find('.expanded').removeClass('expanded');
					} else {
						$div.find('.expandable').addClass('expanded');
					}
					$(this).toggleClass('all-expanded');
				});
				
				// Fields
				var $fields = $('<fieldset class="small horiz"></fieldset>');
				$div.append($fields);

				var fn_addfield = function(label, content) {
					var $dl = $('<dl></dl');
					$dl.append($('<dt></dt>').html(label));
					$dl.append($('<dd></dd>').html(content));
					$fields.append($dl);
				};

				fn_addfield('Status', responseDetails.StatusCode);
				
				
				// Format nice JSON object
				var jsonFormatted = Lib.FormatJson(responseDetails.JSON, 'Response body');
				$div.append(jsonFormatted);
				ShowLogMessage($div, apiTransactionID, transactionDesc);
			},

			OnError = function(msg, apiTransactionID, transactionDesc) {
				console.error("API error", msg);
				var $div = $('<div></div>').addClass('api-error');

				// Format message - strip HTMl from it too
				var isTruncated = false;
				var summary = $('<div></div>').html(msg.Message).text();
				if (summary.length > 200) {
					summary = summary.substring(0, 200) + '...';
					isTruncated = true;
				}
				$div.append(summary);

				// More infO?
				if (isTruncated) {
					var $btn = $('<a></a>').html('more...');
					$btn.click(function() {
						ShowMessageDetails(msg.Message);
					});
					$div.append($btn);
				}
				ShowLogMessage($div, apiTransactionID, transactionDesc);
			};
		return {
			Init: Init
		};
	};

	var viewer = new APILogViewer('#@Model.UniqueID', @Html.ToJSON(Model));
	viewer.Init();
</script>
	
